AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'sam-app3

  Sample SAM Template for sam-app3

  '
Parameters:
  ENV:
    Type: String
    AllowedValues:
    - local
    - dev
    - test
    - prod
    - stage
    - main
    - poc
  STAGENAME:
    Type: String
Conditions:
  IsProd:
    Fn::Equals:
    - Ref: ENV
    - prod
  IsStage:
    Fn::Equals:
    - Ref: ENV
    - stage
  IsDev:
    Fn::Equals:
    - Ref: ENV
    - dev
  IsMain:
    Fn::Equals:
    - Ref: ENV
    - main
Globals:
  Function:
    Timeout: 365
    MemorySize: 512
    Runtime: nodejs18.x
    Tracing: Active
    Architectures:
    - x86_64
    Layers:
    - Ref: SharedLayer
    Environment:
      Variables:
        ENV:
          Ref: ENV
        DYNAMO_DB_LOCAL: http://dynamodb-local:8000
        REDIS_DB_LOCAL: redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@redis-cache:6380
    Tags:
      ProjectName: test
      Environment:
        Fn::If:
        - IsDev
        - Development
        - Ref: ENV
  Api:
    Cors:
      AllowMethods: '''*'''
      AllowHeaders: '''*'''
      AllowOrigin: '''*'''
Resources:
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LoginFunction
      Handler: app.lambdaHandler
      Events:
        LoginApi:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId:
              Ref: testApi
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Fn::Sub: user-lockout-${ENV}
      - DynamoDBReconfigurePolicy:
          TableName:
            Fn::Sub: user-lockout-${ENV}
    Metadata:
      SamResourceId: LoginFunction
  LoginFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - /aws/lambda/
          - Ref: LoginFunction
      RetentionInDays:
        Fn::If:
        - IsDev
        - 7
        - 365
  PropertyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PropertyFunction
      Handler: app.lambdaHandler
      Events:
        PropertyApi:
          Type: Api
          Properties:
            Path: /property
            Method: post
            RestApiId:
              Ref: testApi
    Metadata:
      SamResourceId: PropertyFunction
  PropertyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - /aws/lambda/
          - Ref: PropertyFunction
      RetentionInDays:
        Fn::If:
        - IsDev
        - 7
        - 365
  testApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - /aws/apigateway/
          - Fn::Sub: ${AWS::StackName}
          - /test-custom-log-group
      RetentionInDays:
        Fn::If:
        - IsDev
        - 7
        - 365
  testApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Fn::If:
        - IsDev
        - Dev
        - Fn::If:
          - IsStage
          - Stage
          - Fn::Sub: ${STAGENAME}
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        CacheTtlInSeconds: 0
        CachingEnabled: false
        CacheDataEncrypted: false
        MetricsEnabled: true
        ThrottlingBurstLimit:
          Fn::If:
          - IsProd
          - 5000
          - 2000
        ThrottlingRateLimit:
          Fn::If:
          - IsProd
          - 3000.0
          - 1000.0
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - testApiLogGroup
          - Arn
        Format: $context.requestId $context.identity.sourceIp $context.identity.caller
          $context.identity.user $context.httpMethod $context.resourcePath $context.status
          $context.integration.latency $context.requestTime $context.protocol $context.responseLength
          $context.integrationErrorMessage
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::If:
        - IsDev
        - SharedLayer
        - Fn::Sub: SharedLayer-${ENV}
      Description: Shared NPM package and Layer.
      ContentUri: ..\..\layer
      CompatibleRuntimes:
      - nodejs18.x
  LockoutInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: user-lockout-${ENV}
      AttributeDefinitions:
      - AttributeName: user_name
        AttributeType: S
      - AttributeName: attempt_counter
        AttributeType: N
      KeySchema:
      - AttributeName: user_name
        KeyType: HASH
      - AttributeName: attempt_counter
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: UserName
        KeySchema:
        - AttributeName: user_name
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
      - Key: ProjectName
        Value: test
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: ENV
  testLogsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName:
        Fn::Sub: test-Error-Monitoring-${ENV}
      DashboardBody:
        Fn::Sub: "{\n  \"widgets\": [\n    {\n      \"type\": \"text\",\n      \"\
          y\": 0,\n      \"x\": 0,\n      \"width\": 24,\n      \"height\": 1,\n \
          \     \"properties\": {\n          \"markdown\": \"LAMBDA METRICS\"\n  \
          \    }\n    },\n    {\n      \"type\": \"text\",\n      \"y\": 20,\n   \
          \   \"x\": 0,\n      \"width\": 24,\n      \"height\": 1,\n      \"properties\"\
          : {\n          \"markdown\": \"DYNAMODB METRICS\"\n      }    \n    },\n\
          \    {\n      \"type\": \"text\",\n      \"y\": 13,\n      \"x\": 0,\n \
          \     \"width\": 24,\n      \"height\": 1,\n      \"properties\": {\n  \
          \        \"markdown\": \"API METRICS\"\n      }    \n    },\n    {\n   \
          \   \"type\": \"metric\",\n      \"width\": 24,\n      \"height\": 6,\n\
          \      \"y\": 14,\n      \"x\": 0,\n      \"properties\": {\n        \"\
          metrics\": [\n            [ \"AWS/ApiGateway\", \"Latency\", \"ApiName\"\
          , \"test-poc\" ],\n            [ \".\", \"IntegrationLatency\", \".\", \"\
          .\" ],\n            [ \".\", \"Count\", \".\", \".\" ]\n        ],\n   \
          \     \"period\": 300,\n        \"stat\": \"Sum\",\n        \"region\":\
          \ \"${AWS::Region}\",\n        \"title\": \"Api-Gateway- Count, IntegrationLatency,\
          \ Latency\",\n        \"sparkline\": true,\n        \"view\": \"timeSeries\"\
          \n      }  \n    },\n    {\n      \"type\": \"metric\",\n      \"width\"\
          : 24,\n      \"height\": 6,\n      \"y\": 14,\n      \"x\": 0,\n      \"\
          properties\": {\n        \"metrics\": [\n            [ \"AWS/ApiGateway\"\
          , \"4XXError\", \"ApiName\", \"test-poc\" ],\n            [ \".\", \"5XXError\"\
          , \".\", \".\" ]\n        ],\n        \"period\": 300,\n        \"stat\"\
          : \"Sum\",\n        \"region\": \"${AWS::Region}\",\n        \"title\":\
          \ \"Api-Gateway 4XXError, 5XXError Metrics\",\n        \"sparkline\": true,\n\
          \        \"view\": \"timeSeries\"\n      }  \n    },\n    {\n      \"type\"\
          : \"metric\",\n      \"height\": 6,\n      \"width\": 12,\n      \"y\":\
          \ 21,\n      \"x\": 0,\n      \"properties\": {\n        \"metrics\": [\n\
          \            [ \"AWS/DynamoDB\", \"ConsumedReadCapacityUnits\", \"TableName\"\
          , \"user-profile-${ENV}\", { \"region\": \"${AWS::Region}\" } ],\n     \
          \       [ \".\", \"ConsumedWriteCapacityUnits\", \".\", \".\", { \"region\"\
          : \"${AWS::Region}\" } ]\n        ],\n        \"period\": 300,\n       \
          \ \"stat\": \"Sum\",\n        \"region\": \"${AWS::Region}\",\n        \"\
          title\": \"UserProfile-Read&Write Metrics\",\n        \"sparkline\": true,\n\
          \        \"view\": \"timeSeries\"\n      }  \n    },\n    {\n      \"type\"\
          : \"metric\",\n      \"height\": 6,\n      \"width\": 12,\n      \"y\":\
          \ 21,\n      \"x\": 12,\n      \"properties\": {\n        \"metrics\": [\n\
          \            [ \"AWS/DynamoDB\", \"ConsumedReadCapacityUnits\", \"TableName\"\
          , \"user-lockout-${ENV}\", { \"region\": \"${AWS::Region}\" } ],\n     \
          \       [ \".\", \"ConsumedWriteCapacityUnits\", \".\", \".\", { \"region\"\
          : \"${AWS::Region}\" } ]\n        ],\n        \"period\": 300,\n       \
          \ \"stat\": \"Sum\",\n        \"region\": \"${AWS::Region}\",\n        \"\
          title\": \"User-Lockout-Read&Write Metrics\",\n        \"sparkline\": true,\n\
          \        \"view\": \"timeSeries\"\n      }  \n    },\n    {\n      \"type\"\
          : \"metric\",\n      \"y\": 7,\n      \"x\": 0,\n      \"width\": 6,\n \
          \     \"height\": 6,\n      \"properties\": {\n        \"metrics\": [\n\
          \          [ \"AWS/Lambda\", \"Invocations\", \"FunctionName\", \"${PropertyFunction}\"\
          \ ], \n          [ \"...\", \"${LoginFunction}\" ]\n        ],\n       \
          \ \"view\": \"timeSeries\",\n        \"stacked\": false,\n        \"region\"\
          : \"${AWS::Region}\",\n        \"title\": \"LambdaInvocations\"\n      }\
          \  \n    },\n    {\n      \"type\": \"metric\",\n      \"y\": 1,\n     \
          \ \"x\": 6,\n      \"width\": 6,\n      \"height\": 6,\n      \"properties\"\
          : {\n        \"metrics\": [\n          [ \"AWS/Lambda\", \"Invocations\"\
          , \"FunctionName\", \"${PropertyFunction}\" ], \n          [ \"...\", \"\
          ${LoginFunction}\" ]\n        ],\n        \"view\": \"timeSeries\",\n  \
          \      \"stacked\": false,\n        \"region\": \"${AWS::Region}\",\n  \
          \      \"title\": \"LambdaErrors\"\n      }  \n    },\n    {\n      \"type\"\
          : \"metric\",\n      \"y\": 1,\n      \"x\": 12,\n      \"width\": 6,\n\
          \      \"height\": 6,\n      \"properties\": {\n        \"metrics\": [\n\
          \          [ \"AWS/Lambda\", \"Invocations\", \"FunctionName\", \"${PropertyFunction}\"\
          \ ], \n          [ \"...\", \"${LoginFunction}\" ]\n        ],\n       \
          \ \"view\": \"timeSeries\",\n        \"stacked\": false,\n        \"region\"\
          : \"${AWS::Region}\",\n        \"title\": \"LambdaThrottles\"\n      }\n\
          \    },\n    {\n      \"type\": \"metric\",\n      \"y\": 1,\n      \"x\"\
          : 18,\n      \"width\": 6,\n      \"height\": 6,\n      \"properties\":\
          \ {\n        \"metrics\": [\n          [ \"AWS/Lambda\", \"Invocations\"\
          , \"FunctionName\", \"${PropertyFunction}\" ], \n          [ \"...\", \"\
          ${LoginFunction}\" ]\n        ],\n        \"view\": \"timeSeries\",\n  \
          \      \"stacked\": false,\n        \"region\": \"${AWS::Region}\",\n  \
          \      \"title\": \"LambdaDuration\"\n      }  \n    }     \n  ]\n}    \
          \         \n"
Outputs:
  testApi:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${AWS::StackName}.execute-api.${AWS::Region}.amazonaws.com/
  LambdaFunctionNames:
    Description: List of Lambda function names
    Value:
      Fn::Join:
      - ','
      - - Ref: LoginFunction
        - Ref: PropertyFunction
