AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'sam-app3

  Sample SAM Template for sam-app3

  '
Parameters:
  Env:
    Type: String
    AllowedValues:
    - local
    - dev
    - test
    - prod
    - stage
  StageName:
    Type: String
  VpcCIDR:
    Type: String
    Default: 10.180.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.180.10.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.180.11.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.180.20.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.180.21.0/24
  PrivateSubnet3CIDR:
    Type: String
    Default: 10.180.22.0/24
Conditions:
  IsProd:
    Fn::Equals:
    - Ref: Env
    - prod
  IsStage:
    Fn::Equals:
    - Ref: Env
    - stage
  IsDev:
    Fn::Equals:
    - Ref: Env
    - dev
Globals:
  Function:
    Timeout: 365
    MemorySize: 512
    Runtime: nodejs18.x
    Tracing: Active
    VpcConfig:
      SubnetIds:
      - Ref: PrivateSubnet1
      SecurityGroupIds:
      - Ref: NoIngressSecurityGroup
    Architectures:
    - x86_64
    Layers:
    - Ref: SharedLayer
    Environment:
      Variables:
        Env:
          Ref: Env
        DYNAMO_DB_LOCAL: http://dynamodb-local:8000
        REDIS_DB_LOCAL: redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@redis-cache:6380
    Tags:
      ProjectName: Fortress
      Environment:
        Fn::If:
        - IsDev
        - Development
        - Ref: Env
  Api:
    Cors:
      AllowMethods: '''*'''
      AllowHeaders: '''*'''
      AllowOrigin: '''*'''
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env}
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env}
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env} Public Subnet (AZ1)
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env} Public Subnet (AZ2)
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env} Private Subnet (AZ1)
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env} Private Subnet (AZ2)
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env} Private Subnet (AZ3)
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  FortressNatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-ng-eip-${Env}
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - FortressNatGatewayEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-ng-${Env}
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env} Public Routes
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Fortress-platform-vpc-${Env} Private Routes (AZ1)
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet3
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: fortress-no-ingress-sg-${Env}
      GroupDescription: Security group with no ingress rule
      VpcId:
        Ref: VPC
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LoginFunction
      Handler: app.lambdaHandler
      Events:
        LoginApi:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId:
              Ref: FortressApi
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Fn::If:
            - IsPreProd
            - user-lockout-uat
            - Fn::Sub: user-lockout-${Env}
      - DynamoDBReconfigurePolicy:
          TableName:
            Fn::If:
            - IsPreProd
            - user-lockout-uat
            - Fn::Sub: user-lockout-${Env}
    Metadata:
      SamResourceId: LoginFunction
  LoginFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - /aws/lambda/
          - Ref: LoginFunction
      RetentionInDays:
        Fn::If:
        - IsDev
        - 7
        - 365
  PropertyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PropertyFunction
      Handler: app.lambdaHandler
      Events:
        PropertyApi:
          Type: Api
          Properties:
            Path: /property
            Method: post
            RestApiId:
              Ref: FortressApi
    Metadata:
      SamResourceId: PropertyFunction
  PropertyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - /aws/lambda/
          - Ref: PropertyFunction
      RetentionInDays:
        Fn::If:
        - IsDev
        - 7
        - 365
  FortressApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: StageName
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        CacheTtlInSeconds: 0
        CachingEnabled: false
        CacheDataEncrypted: false
        MetricsEnabled: true
        ThrottlingBurstLimit:
          Fn::If:
          - IsProd
          - 5000
          - 2000
        ThrottlingRateLimit:
          Fn::If:
          - IsProd
          - 3000.0
          - 1000.0
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - FortressApiLogGroup
          - Arn
        Format: $context.requestId $context.identity.sourceIp $context.identity.caller
          $context.identity.user $context.httpMethod $context.resourcePath $context.status
          $context.integration.latency $context.requestTime $context.protocol $context.responseLength
          $context.integrationErrorMessage
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::If:
        - IsDev
        - SharedLayer
        - Fn::Sub: SharedLayer-${Env}
      Description: Shared NPM package and Layer.
      ContentUri: ..\..\layer
      CompatibleRuntimes:
      - nodejs18.x
  LockoutInfoTable:
    Type: AWS::DynamoDB::Table
    Condition: IsNotPreprod
    Properties:
      TableName:
        Fn::If:
        - IsPreProd
        - user-lockout-uat
        - Fn::Sub: user-lockout-${Env}
      AttributeDefinitions:
      - AttributeName: user_name
        AttributeType: S
      - AttributeName: attempt_counter
        AttributeType: N
      KeySchema:
      - AttributeName: user_name
        KeyType: HASH
      - AttributeName: attempt_counter
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: UserName
        KeySchema:
        - AttributeName: user_name
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
      - Key: ProjectName
        Value: Fortress
      - Key: Environment
        Value:
          Fn::If:
          - IsDev
          - Development
          - Ref: Env
Outputs:
  VPCId:
    Description: VPC ID
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VPCId
  MySecurityGroupExport:
    Value:
      Ref: NoIngressSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-MySecurityGroupExport
  SharedLayerpExport:
    Value:
      Ref: SharedLayer
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SharedLayerExport
  CapLoyaltyPlatformApi:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${AWS::StackName}.execute-api.${AWS::Region}.amazonaws.com/
  LambdaFunctionNames:
    Description: List of Lambda function names
    Value:
      Fn::Join:
      - ','
      - - Ref: LoginFunction
        - Ref: PropertyFunction
