AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app3

  Sample SAM Template for sam-app3

Parameters:
  ENV:
    Type: String
    AllowedValues:
      - local
      - dev
      - test
      - prod
      - stage
      - main
      - poc
  STAGENAME: 
    Type: String 
  # VpcCIDR:
  #   Type: String
  #   Default: 10.180.0.0/16

  # PublicSubnet1CIDR:
  #   Type: String
  #   Default: 10.180.10.0/24

  # PublicSubnet2CIDR:
  #   Type: String
  #   Default: 10.180.11.0/24

  # PrivateSubnet1CIDR:
  #   Type: String
  #   Default: 10.180.20.0/24

  # PrivateSubnet2CIDR:
  #   Type: String
  #   Default: 10.180.21.0/24

  # PrivateSubnet3CIDR:
  #   Type: String
  #   Default: 10.180.22.0/24     

Conditions:
  IsProd: !Equals
    - !Ref ENV
    - prod
  IsStage: !Equals
    - !Ref ENV
    - stage
  IsDev: !Equals
    - !Ref ENV
    - dev
  IsMain: !Equals
    - !Ref ENV
    - main  

Globals:
  Function:
    Timeout: 365
    MemorySize: 512
    Runtime: nodejs18.x
    Tracing: Active
    # VpcConfig:
    #   SubnetIds:
    #     - !Ref PrivateSubnet1
    #   SecurityGroupIds:
    #     - !Ref NoIngressSecurityGroup
    Architectures:
      - x86_64
    Layers:
      - !Ref SharedLayer
    Environment:
      Variables:
        ENV: !Ref ENV
        DYNAMO_DB_LOCAL: http://dynamodb-local:8000
        REDIS_DB_LOCAL: redis://:eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81@redis-cache:6380
    Tags:
      ProjectName: test
      Environment: !If [IsDev, Development, !Ref ENV]
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
  # VPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: !Ref VpcCIDR
  #     EnableDnsSupport: true
  #     EnableDnsHostnames: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV}'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway
  #   Properties:
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV}'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # InternetGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     InternetGatewayId: !Ref InternetGateway
  #     VpcId: !Ref VPC

  # PublicSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [0, !GetAZs '']
  #     CidrBlock: !Ref PublicSubnet1CIDR
  #     MapPublicIpOnLaunch: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV} Public Subnet (AZ1)'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # PublicSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [1, !GetAZs '']
  #     CidrBlock: !Ref PublicSubnet2CIDR
  #     MapPublicIpOnLaunch: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV} Public Subnet (AZ2)'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # PrivateSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [0, !GetAZs '']
  #     CidrBlock: !Ref PrivateSubnet1CIDR
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV} Private Subnet (AZ1)'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # PrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [1, !GetAZs '']
  #     CidrBlock: !Ref PrivateSubnet2CIDR
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV} Private Subnet (AZ2)'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # PrivateSubnet3:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [2, !GetAZs '']
  #     CidrBlock: !Ref PrivateSubnet3CIDR
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV} Private Subnet (AZ3)'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # testNatGatewayEIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-ng-eip-${ENV}'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # NatGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt testNatGatewayEIP.AllocationId
  #     SubnetId: !Ref PublicSubnet1
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-ng-${ENV}'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV} Public Routes'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # DefaultPublicRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway

  # PublicSubnet1RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnet1

  # PublicSubnet2RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnet2

  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub 'test-platform-vpc-${ENV} Private Routes (AZ1)'
  #       - Key: ProjectName
  #         Value: test
  #       - Key: Environment
  #         Value: !If [IsDev, Development, !Ref ENV]

  # DefaultPrivateRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway

  # PrivateSubnet1RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref PrivateSubnet1

  # PrivateSubnet2RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref PrivateSubnet2

  # PrivateSubnet3RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref PrivateSubnet3

  # NoIngressSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub 'test-no-ingress-sg-${ENV}'
  #     GroupDescription: 'Security group with no ingress rule'
  #     VpcId: !Ref VPC

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/
      Handler: app.lambdaHandler
      Events:
        LoginApi:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId: !Ref testApi      
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub 'user-lockout-${ENV}'
        - DynamoDBReconfigurePolicy:
            TableName: !Sub 'user-lockout-${ENV}'

  LoginFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref LoginFunction]]
      RetentionInDays: !If [IsDev, 7, 365] 

  PropertyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: property/
      Handler: app.lambdaHandler
      Events:
        PropertyApi:
          Type: Api
          Properties:
            Path: /property
            Method: post
            RestApiId: !Ref testApi   
  
  PropertyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref PropertyFunction]]
      RetentionInDays: !If [IsDev, 7, 365]

  testApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/apigateway/', !Sub '${AWS::StackName}', '/test-custom-log-group']]
      RetentionInDays: !If [IsDev, 7, 365]  

  testApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !If
        - IsDev
        - Dev
        - !If
          - IsStage
          - Stage
          - !Sub "${STAGENAME}"
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          CacheTtlInSeconds: 0
          CachingEnabled: false
          CacheDataEncrypted: false
          MetricsEnabled: true
          ThrottlingBurstLimit: !If [IsProd, 5000, 2000]
          ThrottlingRateLimit: !If [IsProd, 3000.0, 1000.0]
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      AccessLogSetting:
        DestinationArn: !GetAtt testApiLogGroup.Arn
        Format: '$context.requestId $context.identity.sourceIp $context.identity.caller $context.identity.user $context.httpMethod $context.resourcePath $context.status $context.integration.latency $context.requestTime $context.protocol $context.responseLength $context.integrationErrorMessage' 

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !If [IsDev, SharedLayer, !Sub 'SharedLayer-${ENV}']
      Description: Shared NPM package and Layer.
      ContentUri: 'layer/'
      CompatibleRuntimes:
        - nodejs18.x

  # Tables #
  LockoutInfoTable:
    Type: AWS::DynamoDB::Table
    # Condition: IsNotPreprod
    Properties:
      TableName: !Sub 'user-lockout-${ENV}'
      AttributeDefinitions:
        - AttributeName: user_name
          AttributeType: S
        - AttributeName: attempt_counter
          AttributeType: N
      KeySchema:
        - AttributeName: user_name
          KeyType: HASH
        - AttributeName: attempt_counter
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: UserName
          KeySchema:
            - AttributeName: user_name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: ProjectName
          Value: test
        - Key: Environment
          Value: !If [IsDev, Development, !Ref ENV]

  testLogsDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardName: !Sub 'test-Error-Monitoring-${ENV}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "text",
              "y": 0,
              "x": 0,
              "width": 24,
              "height": 1,
              "properties": {
                  "markdown": "LAMBDA METRICS"
              }
            },
            {
              "type": "text",
              "y": 20,
              "x": 0,
              "width": 24,
              "height": 1,
              "properties": {
                  "markdown": "DYNAMODB METRICS"
              }    
            },
            {
              "type": "text",
              "y": 13,
              "x": 0,
              "width": 24,
              "height": 1,
              "properties": {
                  "markdown": "API METRICS"
              }    
            },
            {
              "type": "metric",
              "width": 24,
              "height": 6,
              "y": 14,
              "x": 0,
              "properties": {
                "metrics": [
                    [ "AWS/ApiGateway", "Latency", "ApiName", "test-poc" ],
                    [ ".", "IntegrationLatency", ".", "." ],
                    [ ".", "Count", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Api-Gateway- Count, IntegrationLatency, Latency",
                "sparkline": true,
                "view": "timeSeries"
              }  
            },
            {
              "type": "metric",
              "width": 24,
              "height": 6,
              "y": 14,
              "x": 0,
              "properties": {
                "metrics": [
                    [ "AWS/ApiGateway", "4XXError", "ApiName", "test-poc" ],
                    [ ".", "5XXError", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Api-Gateway 4XXError, 5XXError Metrics",
                "sparkline": true,
                "view": "timeSeries"
              }  
            },
            {
              "type": "metric",
              "height": 6,
              "width": 12,
              "y": 21,
              "x": 0,
              "properties": {
                "metrics": [
                    [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "user-profile-${ENV}", { "region": "${AWS::Region}" } ],
                    [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "region": "${AWS::Region}" } ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "UserProfile-Read&Write Metrics",
                "sparkline": true,
                "view": "timeSeries"
              }  
            },
            {
              "type": "metric",
              "height": 6,
              "width": 12,
              "y": 21,
              "x": 12,
              "properties": {
                "metrics": [
                    [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "user-lockout-${ENV}", { "region": "${AWS::Region}" } ],
                    [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "region": "${AWS::Region}" } ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "User-Lockout-Read&Write Metrics",
                "sparkline": true,
                "view": "timeSeries"
              }  
            },
            {
              "type": "metric",
              "y": 7,
              "x": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${PropertyFunction}" ], 
                  [ "...", "${LoginFunction}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "LambdaInvocations"
              }  
            },
            {
              "type": "metric",
              "y": 1,
              "x": 6,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${PropertyFunction}" ], 
                  [ "...", "${LoginFunction}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "LambdaErrors"
              }  
            },
            {
              "type": "metric",
              "y": 1,
              "x": 12,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${PropertyFunction}" ], 
                  [ "...", "${LoginFunction}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "LambdaThrottles"
              }
            },
            {
              "type": "metric",
              "y": 1,
              "x": 18,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${PropertyFunction}" ], 
                  [ "...", "${LoginFunction}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "LambdaDuration"
              }  
            }     
          ]
        }             

Outputs:
  # VPCId:
  #   Description: VPC ID
  #   Value: !Ref PrivateSubnet1
  #   Export:
  #     Name: !Sub '${AWS::StackName}-VPCId'
  # MySecurityGroupExport:
  #   Value: !Ref NoIngressSecurityGroup
  #   Export:
  #     Name: !Sub '${AWS::StackName}-MySecurityGroupExport'
  # SharedLayerpExport:
  #   Value: !Ref SharedLayer
  #   Export:
  #     Name: !Sub '${AWS::StackName}-SharedLayerExport'
  testApi:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${AWS::StackName}.execute-api.${AWS::Region}.amazonaws.com/'
  LambdaFunctionNames:
    Description: List of Lambda function names
    Value:
      !Join [
        ',',
        [
          !Ref LoginFunction,
          !Ref PropertyFunction
        ],
      ]