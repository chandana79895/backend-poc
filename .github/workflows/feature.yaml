name: Build and Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  
  unit_test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'

      - name: Unit-test
        run: |
          npm i
          npm run test

  if_merged:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.ref == 'refs/heads/main')
    environment:
      name: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install and Update AWS SAM CLI
        run: |
          curl -L -o aws-sam-cli-linux-x86_64.zip https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
          unzip aws-sam-cli-linux-x86_64.zip -d sam-installation
          sudo ./sam-installation/install --update
          sam --version

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-duration-seconds: 1200
          audience: sts.amazonaws.com

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      # - name: Setup dependencies
      #   run: npm run setup-deps

      # - name: Run Unit Tests
      #   run: NODE_OPTIONS=--max-old-space-size=8192 npm test

      - name: Create .env file from secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          Env: ${{ secrets.ENV }}
          StageName: ${{ secrets.STAGENAME }}
        run: |
          printenv | grep 'Env' > .env.${{ secrets.ENV }}
          printenv | grep 'STAGENAME' > .env.${{ secrets.STAGENAME }}
          cat .env.${{ secrets.ENV }}

      - name: Read .env file and construct parameter overrides
        id: construct-params
        run: |
          PARAMS=""
          while IFS= read -r line; do
            IFS='=' read -r key value <<< "$line"
            PARAMS="$PARAMS ParameterKey=$key,ParameterValue=$value"
          done < .env.${{ secrets.ENV }}
          echo "::set-output name=params::$PARAMS"

      - name: Deploy Backend
        # if: github.event_name == 'if_merged'
        env:         
          ENV: ${{ secrets.ENV }}
          PARAMS: ${{ steps.construct-params.outputs.params }}
          StageName: ${{ secrets.STAGENAME }}
        run: |
          sam validate
          sam build
          sam deploy --parameter-overrides $PARAMS 

  notify_on_success:
    runs-on: ubuntu-latest
    environment:
      name: main
    needs: if_merged
    if: success()
    steps:
      - name: Notify Slack for pipeline success
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ENVIRONMENT: ${{ secrets.ENV }}  
          REPO_SLUG: ${{ secrets.REPO_SLUG }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "GitHub Pipeline Status Notification",
            "attachments": [
              {
                "fields": [
                  {
                    "title": "Repository",
                    "value": "'${REPO_NAME}'"
                  },
                  {
                    "title": "Environment",
                    "value": "'${ENVIRONMENT}'"
                  },
                  {
                    "title": "Status",
                    "value": "SUCCESS",
                    "color": "00FF00"
                  },
                  {
                    "title": "Pipeline URL",
                    "value": "https://github.com/${{ secrets.REPO_SLUG }}/${{ secrets.REPO_NAME }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref }}"
                  }
                ]
              }
            ]
          }' $SLACK_WEBHOOK_URL

  notify_on_failure:
    runs-on: ubuntu-latest
    environment:
      name: main
    needs: if_merged
    if: failure()
    steps:
      - name: Notify Slack for pipeline failure
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ENVIRONMENT: ${{ secrets.ENV }} 
          REPO_SLUG: ${{ secrets.REPO_SLUG }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "GitHub Pipeline Status Notification",
            "attachments": [
              {
                "fields": [
                  {
                    "title": "Repository",
                    "value": "'${REPO_NAME}'"
                  },
                  {
                    "title": "Environment",
                    "value": "'${ENVIRONMENT}'"
                  },
                  {
                    "title": "Status",
                    "value": "FAILED",
                    "color": "#FF0000"
                  },
                  {
                    "title": "Pipeline URL",
                    "value": "https://github.com/${{ secrets.REPO_SLUG }}/${{ secrets.REPO_NAME }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref }}"
                  }
                ]
              }
            ]
          }' $SLACK_WEBHOOK_URL
        
